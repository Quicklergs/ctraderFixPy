{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#introduction","title":"Introduction","text":"<p>A Python package for interacting with cTrader FIX API.</p> <p>This package is developed and maintained by Spotware.</p> <p>You can use cTraderFix on all kinds of Python apps, it uses Twisted to send and receive messages asynchronously.</p> <p>Github Repository: https://github.com/spotware/cTraderFixPy</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install cTraderFix from pip:</p> <pre><code>pip install ctrader-fix\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from twisted.internet import reactor\nfrom inputimeout import inputimeout, TimeoutOccurred\nimport json\nfrom ctrader_fix import *\n\n# Callback for receiving all messages\ndef onMessageReceived(client, responseMessage):\n    print(\"Received: \", responseMessage.getMessage().replace(\"\ufffd\", \"|\"))\n    messageType = responseMessage.getFieldValue(35)\n    if messageType == \"A\":\n        print(\"We are logged in\")\n\n# Callback for client disconnection\ndef disconnected(client, reason): \n    print(\"Disconnected, reason: \", reason)\n\n# Callback for client connection\ndef connected(client):\n    print(\"Connected\")\n    logonRequest = LogonRequest(config)\n    send(logonRequest)\n\n# you can use two separate config files for QUOTE and TRADE\nwith open(\"config-trade.json\") as configFile:\n    config = json.load(configFile)\n\nclient = Client(config[\"Host\"], config[\"Port\"], ssl = config[\"SSL\"])\n\n# Setting client callbacks\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMessageReceived)\n# Starting the client service\nclient.startService()\nreactor.run()\n</code></pre>"},{"location":"client/","title":"Client","text":""},{"location":"client/#client-class","title":"Client Class","text":"<p>You will use an instance of this class to interact with API.</p> <p>Each instance of this class will have one connection to API, either QUOTE or TRADE.</p> <p>The client class is driven from Twisted ClientService class, and it abstracts away all the connection / reconnection complexities from you.</p>"},{"location":"client/#creating-a-client","title":"Creating a Client","text":"<p>Let's create an isntance of Client class:</p> <pre><code>from ctrader_fix import *\n\nclient = Client(config[\"Host\"], config[\"Port\"], ssl = config[\"SSL\"])\n</code></pre> <p>It's constructor has several parameters that you can use for controling it behavior:</p> <ul> <li> <p>host: The API host endpoint, you can get it from your cTrader FIX settings</p> </li> <li> <p>port: The API host port number, you can get it from your cTrader FIX settings</p> </li> <li> <p>ssl: It't bool flag, if Yes client will use SSL for connection otherwise it will use plain TCP connection</p> </li> </ul> <p>The SSL connection is not working for now</p> <p>There are three other optional parameters which are from Twisted client service, you can find their detail here: https://twistedmatrix.com/documents/current/api/twisted.application.internet.ClientService.html </p>"},{"location":"client/#callbacks","title":"Callbacks","text":"<p>To use your client you have to set it's call backs:</p> <ul> <li> <p>ConnectedCallback(client): This callback will be called when client gets connected, use client setConnectedCallback method to assign a callback for it</p> </li> <li> <p>DisconnectedCallback(client, reason): This callback will be called when client gets disconnected, use client setDisconnectedCallback method to assign a callback for it</p> </li> <li> <p>MessageReceivedCallback(client, message): This callback will be called when a message is received, it's called for all message types, use setMessageReceivedCallback to assign a callback for it</p> </li> </ul> <p>Use the connected call back to send a logon message.</p> <p>And after logon use your message received call back to continue your interaction with API.</p>"},{"location":"config/","title":"Config","text":""},{"location":"config/#config","title":"Config","text":"<p>When you create a request message you have to pass a config, this config should be a dictionary like object with these keys:</p> <ul> <li>Host: The FIX host that will be used for client connection</li> <li>Port: The port number of host</li> <li>SSL: true/false, this can be used by client if SSL connected is required</li> <li>Username: Your cTrader trading account number</li> <li>Password: Your cTrader trading account password</li> <li>BeginString: Message begin string (FIX.4.4)</li> <li>SenderCompID: Your cTrader FIX SenderCompID </li> <li>SenderSubID: Your cTrader FIX SenderSubID (QUOTE/TRADE)</li> <li>TargetCompID: Your cTrader FIX TargetCompID (cServer),</li> <li>TargetSubID: Your cTrader FIX TargetSubID (QUOTE),</li> <li>HeartBeat: The heartbeat seconds (30)</li> </ul> <p>You can get the values for most of them from your cTrader FIX settings.</p> <p>You can use a JSON file to save your configuration, check our samples.</p>"},{"location":"config/#json-sample","title":"JSON Sample","text":"<pre><code>{\n\"Host\": \"h51.p.ctrader.com\",\n\"Port\": 5201,\n\"SSL\": false,\n\"Username\": \"3279204\",\n\"Password\": \"3279204\",\n\"BeginString\": \"FIX.4.4\",\n\"SenderCompID\": \"demo.icmarkets.3279203\",\n\"SenderSubID\": \"QUOTE\",\n\"TargetCompID\": \"cServer\",\n\"TargetSubID\": \"QUOTE\",\n\"HeartBeat\": \"30\"\n}\n</code></pre> <p>You can use it like this:</p> <pre><code>with open(\"config.json\") as configFile:\n    config = json.load(configFile)\n\n# For client\nclient = Client(config[\"Host\"], config[\"Port\"], ssl = config[\"SSL\"])\n\n# For request messages\nlogonRequest = LogonRequest(config)\n</code></pre>"},{"location":"receiving-messages/","title":"Receiving Messages","text":""},{"location":"receiving-messages/#response-message","title":"Response Message","text":"<p>Whenever client receives a FIX message it calls the \"MessagedReceived\" callback with the message.</p> <p>The message parameter of callback is not a plain string, it's an instance of ResponseMessage type.</p> <p>ResponseMessage class allows you to easily access each field of a response message.</p>"},{"location":"receiving-messages/#getting-message-field-values","title":"Getting Message Field Values","text":"<p>To get a field value you can use the response message GetFieldValue method, it takes the FIX field number and returns the value(s).</p> <p>The GetFieldValue can return three types of values:</p> <ul> <li> <p>String: When there is only one field of your provided field number on the message it returns that field value</p> </li> <li> <p>List: If the field is repetitive like symbol IDs or names, then it returns a list, all of those fields values will be inside that list</p> </li> <li> <p>None: if there was no such field inside the message</p> </li> </ul>"},{"location":"receiving-messages/#getting-raw-message","title":"Getting Raw Message","text":"<p>If you want to get the raw string of reponse message, you can call the response message getMessage method.</p>"},{"location":"sending-messages/","title":"Sending Messages","text":""},{"location":"sending-messages/#messages","title":"Messages","text":"<p>The package has a class for each of the cTrader FIX API client side messages.</p> <p>You have to use those classes to send request messages.</p> <p>To set fields of a message you should use message instance attributes and use exact field names that are defined on cTrader FIX Engine, Rules of Engagement document.</p>"},{"location":"sending-messages/#examples","title":"Examples","text":"<p>Let's create some messages:</p> <pre><code># All request messages contructors requires the config to be passed as a parameter\nlogonRequests = LogonRequest(config)\n\nsecurityListRequest = SecurityListRequest(config)\nsecurityListRequest.SecurityReqID = \"A\"\nsecurityListRequest.SecurityListRequestType = 0\n\nnewOrderSingle = NewOrderSingle(config)\nnewOrderSingle.ClOrdID = \"B\"\nnewOrderSingle.Symbol = 1\nnewOrderSingle.Side = 1\nnewOrderSingle.OrderQty = 1000\nnewOrderSingle.OrdType = 1\nnewOrderSingle.Designation = \"From FIX\"\n</code></pre>"},{"location":"sending-messages/#sending","title":"Sending","text":"<p>To send a message you must use the client send method:</p> <pre><code># It returns a Twisted diferred\ndiferred = client.send(request)\ndiferred.addCallback(lambda _: print(\"\\nSent: \", request.getMessage(client.getMessageSequenceNumber()).replace(\"\", \"|\")))\n</code></pre> <p>You can only call the client send method from OnMessageReceived call back or connected callback.</p>"}]}